#!/usr/bin/env node

require("babel-register");

var http = require("http");
var config = require("config");
var logger = require("lib/logger");
var app = require("app");
var models = require("models")

var port = normalizePort(config.PORT);
app.set('port', port);

var server = http.createServer(app);

models.sequelize
    .sync({force: true})
    .then(function () {
        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
    })
    .catch(function (ex) {
        logger.fatal(ex,
            "Sequelize sync failed. Verify your MySQL credentials and make sure `%s` database exists.",
            config.DB_NAME
        );
        process.exit(1);
    });

/**
 * Normalize a port into a number, string, or undefined.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port > 0) {
        return port;
    }
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // Handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
          logger.fatal(bind + ' requires elevated privileges');
          process.exit(1);
          break;
        case 'EADDRINUSE':
          logger.fatal(bind + ' is already in use');
          process.exit(1);
          break;
        default:
          throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;

    logger.info('Server listening on http://localhost:' + port);
}